{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","width","height","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8LAmBeA,EAjBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAe,EAARC,GAExB,OACI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAG,+BAA0BJ,GAASK,MAAM,QAAQC,OAAO,UACpE,6BAGI,4BAAKN,GACL,2BAAIC,OCgBDM,EAxBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAMhB,OACI,6BAESA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACA,kBAAC,EAAD,CACAC,IAAKJ,EAAOG,GAAGT,GAEfA,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,aCNtBY,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACI,yBAAKZ,UAAU,OACX,2BAAOA,UAAU,mCAAmCa,KAAK,OAAOC,YAAY,iBAC5EC,SAAUH,MCKPI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBjB,OAAQ,UACnEc,EAAMI,WCmBAC,E,YArBX,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KACDM,MAAQ,CACTC,UAAW,GAHD,E,iFAQdC,KAAKC,SAAS,CAACF,UAAS,M,+BAKxB,OAAGC,KAAKF,MAAMC,SACH,0DAGJC,KAAKR,MAAMI,a,GAlBEM,aCiEbC,G,wBAlDX,aAAc,IAAD,8BACT,+CAeRC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACf,YAAamB,EAAMC,OAAOC,QACzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QAhBrB,EAAKT,MAAQ,CACTlB,OAAQ,GACRM,YAAa,IAJR,E,iFAQO,IAAD,OACfwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKb,SAAS,CAACrB,OAAOkC,S,+BAa/B,IAAD,EAC2Bd,KAAKF,MAA5BlB,EADJ,EACIA,OAASM,EADb,EACaA,YACX6B,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASjC,EAAYgC,kBAGzD,OAAQtC,EAAOwC,OAGX,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,WAAd,mBADJ,KAEI,uBAAGA,UAAU,uBAAb,mBACA,kBAAC,EAAD,CAAWY,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQmC,IADtB,UAPP,8C,GAlCKb,cCFEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACT,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.f6d96dc5.chunk.js","sourcesContent":["import React from 'react';  //you re writing jsx so you must import react so program understand html inside js\r\n\r\nconst Card = ({name ,email, id}) => {  //destructuring within the parameter\r\n\r\n    return(       //Note: only return one thing at a time for eg div below is one\r\n        <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            {/* <img src={`https://robohash.org/${props.name}`}  width='200px' height='200px' />   //if no const was there write this}  */}\r\n            <img src={`https://robohash.org/${name}`}  width='200px' height='200px' />\r\n        <div>\r\n        {/* generates random robot */}\r\n        \r\n            <h2>{name}</h2>\r\n            <p>{email}</p>  \r\n            {/* since this is js expression we wrap in curly bracket */}\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n \r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    // if(true){\r\n    //     throw new Error('Nooooo! Error Occured');  //for error throwing and checking\r\n    // }\r\n     \r\n    return(\r\n        <div>\r\n             {\r\n                 robots.map((user, i) =>{\r\n                    return  (\r\n                    <Card \r\n                    key={robots[i].id} \r\n                    //key is something that doesnt change and key is used because one of them gets deleted then it wont affect entire by updating all instead it deletes key associated one\r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}/>  \r\n                    );  \r\n                })\r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ( {searchfield , searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='text' placeholder='search here...' \r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '3px solid black', height: '800px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n    \r\n};\r\n\r\nexport default Scroll;","import React , { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){     //one of react life cycle method ---it runs this block if it catches errors\r\n        this.setState({hasError:true})\r\n\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){   //if is true\r\n            return <h1>OOPS THAT WAS AN ERROR....</h1>\r\n        }\r\n\r\n        return this.props.children   //children is anything that is between error boundary eg:cardlist\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { render } from '@testing-library/react';\r\n//cardlist and SearchBox neeeds to send his info to his parent App in order to communicate with SearchBox component \r\n//in order to communicate React has idea of STATE -->an object that describes our application we re able to change input value and what robots array means\r\n\r\n//STATE >> props  here the parent feeds state in to a child component and when child receives a state its property, that child can never change that property , the parent just   tells what the  state is and the child  receives it as robots                  \r\n\r\n\r\n\r\nclass App extends Component{ \r\n    \r\n    //adding state\r\n    constructor(){\r\n        super();    //must call super as it is derived class and this calls the constructor of Component\r\n        this.state = {   //i am this i usually live in parent components to pass states to different components\r\n            robots: [],  //robots array\r\n            searchfield: ''\r\n        }      \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>response.json())\r\n        .then(users =>this.setState({robots:users}));  //here state is updated so render runs again\r\n            \r\n      \r\n    }\r\n//in search box we have we have event which use here\r\nonSearchChange = (event) => {   //give arrow function so that 'this' refers to where it was created for eg below this was created in input and is not referring to 'this' of App              \r\n    this.setState({searchfield: event.target.value})                                                                      \r\n    console.log(event.target.value);\r\n    \r\n    // console.log(filteredRobots);\r\n}\r\n\r\n\r\n    render(){\r\n        const { robots , searchfield} =this.state;\r\n        const filteredRobots = robots.filter(robot =>{                            //this.state.robots is removed because above const is added\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());   //this.state.robots is removed because above const is added\r\n        })\r\n        \r\n        return !robots.length?     //this.state.robots is removed because above const is added\r\n             <h1>Loading...</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='grow f1'>MY ROBO FRIENDS</h1>  {/*h1 is easy so no component for it*/}\r\n                <p className='link dim black i f4'>Anjan Pudasaini</p>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>  \r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>    {/*} // whenr robots={this.state.robots} -->now robots is now props so cardlist accepts props */}\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n             </div>\r\n            \r\n        );  // after return line no: 47-58 ,its ternary statement if else if\r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';  //father of all components\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n  //destructured because it isnt default export\n\nReactDOM.render(  //three card components wrapped in single element div to return\n<App />\n, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}